TestAgent:
  Roles:
    - Role: desktopChrome
      Capabilities:
        chromeOptions:
          args:
            - use-fake-ui-for-media-stream
            - use-fake-device-for-media-stream
            - no-sandbox
            - --user-agent=Agent
      App: desktop
  Actions:
    - Type: navigate
      Role: desktopChrome
      Value: https://www.whatsmyua.info/
    - Type: sleep
      Time: 100

TestBrowserChromeAV:
  Roles:
    - Role: desktopChrome
      Capabilities:
        chromeOptions:
          args:
            - use-fake-ui-for-media-stream
            - use-fake-device-for-media-stream
            - no-sandbox
      App: desktop
  Actions:
    - Type: navigate
      Role: desktopChrome
      Value: https://webcamtests.com/
    - Type: click
      Strategy: id
      Role: desktopChrome
      Id: webcam-launcher
    - Type: sleep
      Time: 100

NavigateToWebRTCApp:
  Step: I navigate to video app page and call
  Roles:
    - Role: desktopChrome # Default Role
      App: desktop
  Actions:
    - Type: navigate
      Value: https://webrtc.github.io/samples/src/content/peerconnection/channel/
    - Type: click
      Strategy: id
      Id: "startButton"
    - Type: maximize

EndCall:
  Step: I end the call
  Roles:
    - Role: desktopChrome
      App: desktop
  Actions:
    - Type: stop_driver

Recordings:
  ParallelRoles: true
  Step: I start recording audio, video and traces
  Roles:
    - Role: commandLine,commandLine2,commandLine3
      App: command
  Actions:
    - Type: command
      Value: "tshark -Q -i \"$AND_CLI_INTERFACE$\" -w trace.pcapng -a duration:$AND_CLI_TIME$"
      Role: commandLine
    - Type: command
      Value: "sox -q -r 44100 -t coreaudio \"default\" call.wav trim 0 $AND_CLI_TIME$"
      Role: commandLine
    - Type: command
      Value: "ffmpeg -v quiet -y -f avfoundation -t $AND_CLI_TIME$ -i \"$AND_CLI_VIDEO_IN$:\" output.mkv"
      Role: commandLine
    - Type: sync

Analysis:
  Step: I start analysing audio, video and traces
  Roles:
    - Role: commandLine
      App: command
  Actions:
    - Type: command
      Value: sox call.wav -b 16 call_16b.wav # Transform to 16b audio for ViSQOL evaluation
    - Type: command
      Value: docker run --rm -v $AND_CMD_pwd$:/home alvarolaserna/visqol:1.0 ./visqol.sh /home/call_16b.wav /home/call_16b.wav > mox_logs.txt
    - Type: command
      Value: docker run --rm -v $AND_CMD_pwd$:/home alvarolaserna/visqol:1.0 ./visqol.sh /home/call_16b.wav /home/call_16b.wav
      Greps:
        - var: SOME_VAR
          condition: nempty
          remove: "MOS-LQO:\t\t"
          match: "MOS-LQO:\t\t(.*)"
    - Type: command
      Value: echo $AND_CLI_SOME_VAR$ > mos.txt # Write ViSQOL analysis results to mos.txt file
    - Type: command
      Value: tshark -r trace.pcapng -qz io,stat,1 > trace.txt # Write trace analysis results to trace.txt file
    - Type: command
      Value: python3 get_quality.py -t ./ -m original --fps true # Get Results from video analysis in files

LimitNetwork:
  Step: I limit network
  Roles:
    - Role: commandLine
      App: command
  Actions:
    - Type: command
      Value: echo "Limit Network" # ssh user@IP_ROUTER sh wrapper_tc.sh 3000 0 5 1000

CaseWebRTC:
  ParallelRoles: true
  Vars:
    TIME: 10
    INTERFACE: en0
    VIDEO_IN: "2"
  Roles:
    - Role: desktopChrome,desktopChrome2
      Capabilities:
        chromeOptions:
          args:
            - use-fake-ui-for-media-stream
            - use-fake-device-for-media-stream
            - no-sandbox
            - use-file-for-fake-audio-capture=/user/silence.wav
            - use-file-for-fake-video-capture=/Users/$AND_CLI_USER$/Documents/ref_video.mjpeg
      App: desktop
    - Role: commandLine,commandLine2,commandLine3
      App: command
  Actions:
    - Given: I navigate to video app page and call
      Role: desktopChrome,desktopChrome2
    - Then: I limit network
    - Given: I start recording audio, video and traces
    - And: I end the call
      Role: desktopChrome,desktopChrome2
    - Then: I start analysing audio, video and traces


